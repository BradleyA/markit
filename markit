#!/bin/bash
#	markit  3.213.519  2019-06-07T20:00:24.218494-05:00 (CDT)  https://github.com/BradleyA/markit  uadmin  six-rpi3b.cptx86.com 3.212-1-ge62c860  
#	   markit - remove quotes from [ERROR] about requiring a git pull first close #67 
#	markit  3.210.512  2019-05-21T13:32:34.729227-05:00 (CDT)  https://github.com/BradleyA/markit  uadmin  six-rpi3b.cptx86.com 3.209-9-g3b1367c  
#	   markit - add file types for terraform close #64 
#	markit  3.204.486  2019-02-16T14:33:13.230013-06:00 (CST)  https://github.com/BradleyA/markit  uadmin  six-rpi3b.cptx86.com 3.201-3-g6e0dc34  
#	   markit from bitbucket includes github URL not Bitbucket URL on line 2 close #62 
#	markit  3.200.405  2019-02-09T20:47:52.382189-06:00 (CST)  https://github.com/BradleyA/markit  uadmin  six-rpi3b.cptx86.com 3.199  
#	   close #28 retesting markit only works repositories that have been clone from a remote repository.  something to do with master origin I think 
#	markit  3.191.361  2019-02-07T20:52:52.322328-06:00 (CST)  https://github.com/BradleyA/markit  uadmin  six-rpi3b.cptx86.com 3.190  
#	   markit add Environment Variables MARKITLOCAL to support markit on local system #61 complete testing and tag changes local & remote 
#	markit  3.154.314  2019-01-21T10:35:41.134829-06:00 (CST)  https://github.com/BradleyA/markit  uadmin  six-rpi3b.cptx86.com 3.153  
#	   production standard 5 include Copyright notice 
#	markit  3.153.313  2019-01-19T23:29:23.264621-06:00 (CST)  https://github.com/BradleyA/markit.git  uadmin  six-rpi3b.cptx86.com 3.152  
#	   markit considered adapting it to Bitbucket close #38 
#	markit  3.152.312  2019-01-19T23:26:45.803622-06:00 (CST)  https://github.com/BradleyA/markit.git  uadmin  six-rpi3b.cptx86.com 3.151  
#	   production standard 4 update display_help LANGUAGE close #58 
#	markit  3.139.295  2018-11-16T21:38:57.485521-06:00 (CST)  https://github.com/BradleyA/markit  uadmin  one-rpi3b.cptx86.com 3.138  
#	   markit change log format and order close #49 
### markit
#	Copyright (c) 2019 Bradley Allen
#	License is in the online DOCUMENTATION, DOCUMENTATION URL defined below.
#
#	I created this script because Git fails me when it comes to including a
#	version number and a change description in each file being checked-in.
#
#       I want to know what version a piece of code is on any system running
#       it. The system may or may not be connected to any network. The system
#       may or may not have Git installed. The system may or may not have a
#       GitHub repository or Bitbucket repository or GitLab project installed
#       on it. I want the same solution for several types of code (.sh, .go,
#       .yml, .xml, .mk, dockerfile, .txt, etc). I want any person without
#       knowledge of Git or GitHub or Bitbucket or GitLab to be able to answer
#       one question over the phone;
#                       What version are you running?
#
#	Released files need a version number in text when checked in!
#       This is not for your kernal, just files.  Bite me!  and  Merge that!
###
#   production standard 5
#       Order of precedence: environment variable, default code
if [ "${DEBUG}" == "" ] ; then DEBUG="0" ; fi   # 0 = debug off, 1 = debug on, 'export DEBUG=1', 'unset DEBUG' to unset environment variable (bash)
#	set -x
#	set -v
BOLD=$(tput -Txterm bold)
NORMAL=$(tput -Txterm sgr0)
###
display_help() {
echo -e "\n${NORMAL}${0} - add Git verion control information, push to GitHub or Bitbucket or GitLab" 
echo -e "\nUSAGE\n   ${0} [no | normal | all]"
echo    "   ${0} [--help | -help | help | -h | h | -?]"
echo    "   ${0} [--version | -version | -v]"
echo -e "\nDESCRIPTION"
#       Displaying help DESCRIPTION in English en_US.UTF-8
echo    "Markit is a simple bash script that adds Git verion control information to"
echo    "files while being pushed to GitHub, Bitbucket, or GitLab (Supported files:"
echo    "Shell(sh|bash|csh|tcsh|ksh), Go, Dockerfile, YAML, Makefile, Scala,"
echo    "Terraform, Python, Java, PHP, C, C++, JavaScript, Perl, Ruby, PowerShell,"
echo    " Ri, C header, C++ header, HTML, Kotlin, Pascal, R, Rust, Text, XML . . ."
echo -e "\nMarkit supports Semantic Versioning (MAJOR.MINOR.PATCH) and alphanumeric"
echo    "versioning.  Markit will display the current version before prompting you"
echo    "to enter the next version.  Markit includes the number of commits with"
echo    "the version in the file(s).  I find this helpful when commiting several"
echo    "different changes while working on the same PATCH."
echo -e "\nMarkit adds two comment lines with information about file changes to all"
echo    "modified tracked file(s) in your local Git repository.  Then pushes those"
echo    "modified file(s) to either a GitHub repository or Bitbucket repository or"
echo    "GitLab project.  If environment variable MARKITLOCAL is set to 1, markit"
echo    "adds two comment lines, commits modified tracked file(s) in your local"
echo    "Git repository, but does not push to remote Git repository.  I find this"
echo    "helpful when working without network access to a remote Git repository."
echo -e "\nThe first comment line includes file name, version.commit, date, time,"
echo    "user, hostname, and previous version. The second comment line includes"
echo    "a brief description about changes made to the file(s)."
echo -e "\nThere will be a prompt to add comment character(s) for unknown file names"
echo    "when needed and a prompt to add a description about the changes."
echo -e "\nMarkit only modifies Git tracked file(s) by default.  To change a Git"
echo    "untracked file to a Git tracked file enter, 'git add <file_name>'.  To"
echo    "include all tracked and untracked file(s) enter, 'markit all'.  To"
echo    "prevent an untracked file from being tracked, add file(s) to .gitignore"
echo    "file."
#       Displaying help DESCRIPTION in French fr_CA.UTF-8, fr_FR.UTF-8, fr_CH.UTF-8
if [ "${LANG}" == "fr_CA.UTF-8" ] || [ "${LANG}" == "fr_FR.UTF-8" ] || [ "${LANG}" == "fr_CH.UTF-8" ] ; then
        echo -e "\n--> ${LANG}"
        echo    "<votre aide va ici>" # your help goes here
        echo    "Souhaitez-vous traduire la section description?" # Do you want to translate the description section?
elif ! [ "${LANG}" == "en_US.UTF-8" ] ; then
        get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${USER_ID}:${GROUP_ID} ${BOLD}[WARN]${NORMAL}  Your language, ${LANG}, is not supported.  Would you like to translate the description section?" 1>&2
fi
echo -e "\nEnvironment Variables"
echo    "If using the bash shell, enter; 'export DEBUG=1' on the command line to set"
echo    "the DEBUG environment variable to '1' (0 = debug off, 1 = debug on).  Use the"
echo    "command, 'unset DEBUG' to remove the exported information from the DEBUG"
echo    "environment variable.  You are on your own defining environment variables if"
echo    "you are using other shells."
echo    "   DEBUG       (default '0')"
echo    "   MARKITLOCAL push to remote Git repository (default '0')"
echo    "               export MARKITLOCAL=1 only commit to local Git repository, do not"
echo    "               push to remote Git repository"
echo -e "\nOPTIONS\n   UNTRACKED_FILES - used to specify the handling of untracked files"
echo    "      no       no untracked files (default)"
echo    "      normal   untracked files and directories"
echo    "      all      Also individual files in untracked directories"
echo -e "\nDOCUMENTATION\n   https://github.com/BradleyA/markit"
echo -e "\nEXAMPLES"
echo -e "   ${BOLD}${0}${NORMAL}\n\n   Mark tracked file(s) and push to remote Git repository\n"
echo -e "   ${BOLD}${0} all${NORMAL}\n\n   Mark tracked and untracked files, directories, and files in untracked\n   directories\n"
echo -e "   ${BOLD}export MARKITLOCAL=1"
echo -e "   ${0}${NORMAL}\n"
echo -e "   Mark tracked file(s) but don't push to remote Git repository, only update\n   local repository\n"
}

#       Date and time function ISO 8601
get_date_stamp() {
DATE_STAMP=$(date +%Y-%m-%dT%H:%M:%S.%6N%:z)
TEMP=$(date +%Z)
DATE_STAMP="${DATE_STAMP} (${TEMP})"
}

#       Fully qualified domain name FQDN hostname
LOCALHOST=$(hostname -f)

#       Version
SCRIPT_NAME=$(head -2 "${0}" | awk {'printf $2'})
SCRIPT_VERSION=$(head -2 "${0}" | awk {'printf $3'})

#       UID and GID
USER_ID=$(id -u)
GROUP_ID=$(id -g)

#       Default help and version arguments
if [ "$1" == "--help" ] || [ "$1" == "-help" ] || [ "$1" == "help" ] || [ "$1" == "-h" ] || [ "$1" == "h" ] || [ "$1" == "-?" ] ; then
        display_help | more
        exit 0
fi
if [ "$1" == "--version" ] || [ "$1" == "-version" ] || [ "$1" == "version" ] || [ "$1" == "-v" ] ; then
        echo "${SCRIPT_NAME} ${SCRIPT_VERSION}"
        exit 0
fi

#       DEBUG
if [ "${DEBUG}" == "1" ] ; then get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${USER_ID}:${GROUP_ID} ${BOLD}[DEBUG]${NORMAL}  Name_of_command >${0}< Name_of_arg1 >${1}< Name_of_arg2 >${2}< Name_of_arg3 >${3}<  Version of bash ${BASH_VERSION}" 1>&2 ; fi

###
#       Check if bash-completion/completions/git file on system
if [ -e /usr/share/bash-completion/completions/git ] ; then
	#	This is to support __gitdir in the following section
	source /usr/share/bash-completion/completions/git
else
	get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${USER_ID}:${GROUP_ID} ${BOLD}[INFO]${NORMAL}  /usr/share/bash-completion/completions/git NOT found" 1>&2
fi

#	Check if in Git repository
if ! $( __gitdir > /dev/null 2>&1 ) ; then
	echo -e "Check if you are in a Git repository and you have Git permission.  Current directory $(pwd)" 1>&2
	exit 0
fi

#       Check if environment variable, default 0
if [ "${MARKITLOCAL}" == "" ] ; then MARKITLOCAL="0" ; fi

#	Check if remote Git repository has been setup #28
git rev-list HEAD 1> /dev/null || { get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${USER_ID}:${GROUP_ID} ${BOLD}[ERROR]${NORMAL}  Remote Git repository has not been setup or git clone <remote-repository> was not used to pull remote Git repository before using markit.  ${BOLD}A remote Git repository is required before markit will work with local or remote repositories.${NORMAL}" 1>&2 ; exit 1; }

#
UNTRACKED_FILES=${1:-no}
BEGIN_COMMENT_CHAR=""
END_COMMENT_CHAR=""
REMOTE_REPOSITORY=$(git ls-remote --get-url)
TEMP_FILE="TEMP_MARKIT_FILE"
#	The FILE_MESSAGE is a one line breif description about the changes.
FILE_MESSAGE=""
FILE_RELEASE=""

#	Check if no tag for file ; first time Git repository is being tagged
if ! [ "$(git tag)" == "" ] ; then
# >>> # ??	read about this online: 
# >>>		need to check this out later: git for-each-ref refs/tags --sort=-taggerdate --format='%(refname:short)' --count=1
# >>>		latest tagged commit across all branches
	CURRENT_RELEASE=$(git describe --tags $(git rev-list --tags --max-count=1))
else
	CURRENT_RELEASE="0.1.1"
fi

#	Check arguement 1 for --untracked-files
if [ "$1" != "no" ] && [ "$1" != "normal" ] && [ "$1" != "all" ] && [ "$1" != "" ] ; then
	display_help | more
	get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${USER_ID}:${GROUP_ID} ${BOLD}[ERROR]${NORMAL}  First arguement, ${1}, is NOT no, normal, all." 1>&2
	exit 0
fi

#	Change to top level git directory to include it with ${FILE_NAME} on line one item 2  #39
#	By changing ${FILE_NAME} to include the directory, all the information
#	is available to find ${FILE_NAME}'s location in GitHub or Bitbucket repository or GitLab repository
cd $(git rev-parse --show-toplevel)

#	Create FILE_LIST, remove deleted files from FILE_LIST
FILE_LIST=$(git status -s --untracked-files="${UNTRACKED_FILES}" | grep -v '^D  ' | awk '{print $2}')

#	Check if ${FILE_LIST} is zero length
if [ -z "${FILE_LIST}" ] ; then
	echo -e "No tracked file(s) found to mark and push." 1>&2
#	Display untracked file(s)
	if [ $(git status --untracked-file=all -s | wc -l) ] ; then 
		echo -e "${NORMAL}\nList of untracked file(s).${BOLD}\n"
		git status --untracked-file=all -s | grep '?? ' | sed 's/^??//'
		echo -e "${NORMAL}\nEnter ${BOLD}git add <file-name>${NORMAL} to change <file-name> from an untracked file to a tracked file."
		echo -e "\nOr include all untracked files and directories, enter ${BOLD}markit all${NORMAL}\n"
	fi
	exit 1
fi

#	Check if user has write permission
if ! $(touch ${TEMP_FILE} > /dev/null 2>&1 ) ; then
	get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${USER_ID}:${GROUP_ID} ${BOLD}[ERROR]${NORMAL}  ${USER} does NOT have write permission in local Git repository directory $(pwd)" 1>&2
	exit 1
fi
rm -f ${TEMP_FILE}

#       Check if remote or local Git repository then notify user
if [ "${DEBUG}" == "1" ] ; then get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${USER_ID}:${GROUP_ID} ${BOLD}[DEBUG]${NORMAL}  MARKITLOCAL >${MARKITLOCAL}<" 1>&2 ; fi
if [ "${MARKITLOCAL}" == "0" ] ; then
	echo -e "${NORMAL}Files to be marked and pushed to ${BOLD}remote${NORMAL} Git repository:"
elif [ "${MARKITLOCAL}" == "1" ] ; then
	echo -e "${NORMAL}Files to be marked for ${BOLD}local${NORMAL} Git repository and NOT pushed to remote Git repository:"
else
	get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${USER_ID}:${GROUP_ID} ${BOLD}[ERROR]${NORMAL}  Environment Variables MARKITLOCAL is not set to 0 or 1.  Current setting for MARKITLOCAL >${MARKITLOCAL}<" 1>&2
	exit
fi

#	Prompt for release number
echo -e "\n${BOLD}${FILE_LIST}${NORMAL}"
echo -e "\nCurrent Git repository release number:  ${BOLD}${CURRENT_RELEASE}${NORMAL}"
echo -e "Enter ${BOLD}release number${NORMAL} to commit files (example 3.41.7) or ctrl-c to stop.\n"
read     FILE_RELEASE
if [ -z "${FILE_RELEASE}" ] ; then
	FILE_RELEASE=${CURRENT_RELEASE}
fi

#	Warn user if release number is not great than ${CURRENT_RELEASE}
#	Use case requires a WARNING not an ERROR ; see issue #14 for more information
if [ "${CURRENT_RELEASE}" == "${FILE_RELEASE}" ] || [ "${CURRENT_RELEASE}" \> "${FILE_RELEASE}" ] ; then
	echo -e "Release number may not be greater than current release number." 1>&2
fi
echo -e "\nUsing release number:  ${BOLD}${FILE_RELEASE}${NORMAL}"  1>&2

#	Prompt for single line change description
echo -e "\n${NORMAL}Enter a ${BOLD}one line description${NORMAL} about the changes or ctrl-c to stop.\n\t(example: Added logic for --help; closes #12, resolves #14):\n"
read FILE_MESSAGE
if [ -z "${FILE_MESSAGE}" ] ; then
	echo -e "${NORMAL}Single-line description is ${BOLD}required${NORMAL}.\nTo display your changes between commits,  ${BOLD}git diff <file_name>${NORMAL}." 1>&2
	exit 1
fi

#	Mark each file
for FILE_NAME in ${FILE_LIST} ; do
#
# >>> #15	In the future, Use markit solution for source code and create a wrapper during compile/build time ?
# >>>	This will change the extension case statement objective: move from comments to variables in compiled code
# >>>	move from comments in source code to variables in compiled code
# >>>	very different vision / goal
# >>>	   Use markit in the source code & insert; var BUILD_VERSION="${FILE_RELEASE}.`git rev-list HEAD | wc -l`"
# >>>	   Or use markit; to create CHAR variable found in compiled code ?
# >>>	   	opening comment x.c 'var VERSION="' and ending comment '"'
# >>>	        opening comment x.c 'char VERSION[] = "$Version: ' ${FILE_NAME}    ${FILE_RELEASE}.`git rev-list HEAD | wc -l`     ${DATE_STAMP} ${USER} ${LOCALHOST} `git describe` and ending comment '$";'
# >>>	                        x.o $Version: XXXX XXXX XXXX XXXX '$'
# >>>	        opening comment x.c 'char VERSION_MESSAGE[] = "$Version_message: ' ${FILE_MESSAGE} ` and ending comment '$";'
# >>>	                        x.o $Version_message: XXXX '$'
#
# >>> #21	Create a case statement if other non-extension files like Dockerfile or Makefile need support
	if [ "${FILE_NAME##*/}" == "Dockerfile" ] || [ "${FILE_NAME##*/}" == "Makefile" ] ; then
		BEGIN_COMMENT_CHAR="#	"
		END_COMMENT_CHAR=""
	else
# >>> #??	This does not work if the last character is '.' but it does work if more than one "."
	FILE_EXTENSION=${FILE_NAME##*\.}
	echo -e "\n\t${BOLD}${FILE_NAME}	${FILE_EXTENSION}${NORMAL}"
#	Single-line comment character(s) matching file extension
#	ONLY SUPPORT single-line comments NOT multiple line block comment
	case ${FILE_EXTENSION} in
		sh|bash|csh|tcsh|ksh|pl|PL|psh|py|rb|ps1|msh|php|php3|php4|ph3|ph4|R|yml|yaml|mk|MK|txt|tf|tfstate)
#		shell(sh|bash|csh|tcsh|ksh) perl(pl|PL|psh) Python(py) ruby(rb) PowerShell(ps1|msh) PHP(php|php3|php4|ph3|ph4) R(R) YAML(yml|yaml) Makefile(mk|MK) text(txt) Terraform(tf|tfstate)
			BEGIN_COMMENT_CHAR="# "
			END_COMMENT_CHAR=""
			;;
		c|h|H|hpp|hxx|Hxx|HXX)
#		c(c) C header(h|H|hpp) C++ header(hxx|Hxx|HXX) 
			BEGIN_COMMENT_CHAR="/* "
			END_COMMENT_CHAR=" */"
			;;
		cc|cpp|c++|cxx|go|java|class|jar|js|kt|kts|p|pp|pas|rs|rlib|scala|sc)
#		C++(cc|cpp|c++|cxx) Go(go) Java(java|class|jar) JavaScript(js) Kotlin(kt|kts) Pascal(p|pp|paa) Rust(rs|rlib) Scala(scala|sc)
			BEGIN_COMMENT_CHAR="// "
			END_COMMENT_CHAR=""
			;;
		xml|html|htm)
#		XML(xml) HTML (html|htm) 
			BEGIN_COMMENT_CHAR="<!-- "
			END_COMMENT_CHAR=" -->"
			;;
		*)
#			Prompt for single-line beginning comment character(s)
			echo -e "\nEnter single-line  ${BOLD}BEGINNING${NORMAL}  comment character(s) for ${BOLD}${FILE_NAME}${NORMAL}\n\t(example: # // -- ' ! C !* -- // % ;;  ||  /* <!-- <!--- {- /** --[[ %{ (* <# )"
			read BEGIN_COMMENT_CHAR
			if [ -z "${BEGIN_COMMENT_CHAR}" ] ; then
				display_help | more
				get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${USER_ID}:${GROUP_ID} ${BOLD}[ERROR]${NORMAL}  Single-line comment character(s) is required.\n"       1>&2
				exit 1
			fi
			echo -e "\nEnter single-line  ${BOLD}ENDING${NORMAL}  comment character(s) for ${BOLD}${FILE_NAME}${NORMAL}.\nPress enter for none.\n\t(example: */ --> ---> -} */ --]] %} *) #> )"
			read END_COMMENT_CHAR
			;;
	esac
	fi
	head -1 "${FILE_NAME}" >> ${TEMP_FILE}
#	${FILE_NAME}  ${FILE_RELEASE}.(# of commits) ${DATE_STAMP} ${REMOTE_REPOSITORY} ${USER} ${LOCALHOST} (git describe)
	if [ "${DEBUG}" == "1" ] ; then get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${USER_ID}:${GROUP_ID} ${BOLD}[DEBUG]${NORMAL}  FILE_NAME >${FILE_NAME}< FILE_RELEASE >${FILE_RELEASE}< REMOTE_REPOSITORY >${REMOTE_REPOSITORY}<" 1>&2 ; fi
#	Check if no tag for file / first time in Git repository is being tagged
	get_date_stamp
	if ! [ "$(git tag)" == "" ] ; then
		echo "${BEGIN_COMMENT_CHAR}	${FILE_NAME}  ${FILE_RELEASE}.$(git rev-list HEAD | wc -l)  ${DATE_STAMP}  ${REMOTE_REPOSITORY}  ${USER}  ${LOCALHOST} $(git describe)  ${END_COMMENT_CHAR}" >> ${TEMP_FILE}
	else
		echo "${BEGIN_COMMENT_CHAR}	${FILE_NAME}  ${FILE_RELEASE}.$(git rev-list HEAD | wc -l)  ${DATE_STAMP}  ${REMOTE_REPOSITORY}  ${USER}  ${LOCALHOST} 'No-parent-git-tag-found-in-repository'  ${END_COMMENT_CHAR}" >> ${TEMP_FILE}
	fi
	echo "${BEGIN_COMMENT_CHAR}	   ${FILE_MESSAGE} ${END_COMMENT_CHAR}" >> ${TEMP_FILE}
	tail -n $(wc -l "${FILE_NAME}" | awk '{print $1  - 1}') "${FILE_NAME}" >> ${TEMP_FILE}
	cp "${TEMP_FILE}" "${FILE_NAME}"
	rm "${TEMP_FILE}"
#	Add file contents to the index
	git add "${FILE_NAME}"
done
echo "${NORMAL}"

#	Commit file(s)
git commit -m "${FILE_MESSAGE}"

#	If new release number, Tag file(s)
if ! [ "${FILE_RELEASE}" == "${CURRENT_RELEASE}" ] ; then
	git tag -a ${FILE_RELEASE} -m "${FILE_MESSAGE}"
fi

#	If MARKITLOCAL not set, git push to remote Git repository
if [ "${MARKITLOCAL}" == "0" ] ; then
#	Push changes to GitHub repository or Bitbucket repository or GitLab project
	git push --follow-tags  || { get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${USER_ID}:${GROUP_ID} ${BOLD}[ERROR]${NORMAL}\n\tIf invalid username or password message then enter the following\n\tcommand to complete pushing marked file(s) with the correcet password;\n\t\t${BOLD}git push --follow-tags${NORMAL}\n\n\tIf markit failed to push because the repository contains other work\n\tthat is not in your local Git repository.  Then enter the following\n\tcommands to pull the other changes then push your marked file(s);\n\t\t${BOLD}git pull\n\t\tgit push --follow-tags${NORMAL}" ; exit 1; }
#	Notify user how to view remote Git repository
	echo -e "\nFiles marked and stored in ${BOLD}remote${NORMAL} Git repository."
	echo    "View commits example:  ${BOLD}git log --graph --decorate --oneline --color --stat${NORMAL}"

#	If MARKITLOCAL, notify user how to view local commits
elif [ "${MARKITLOCAL}" == "1" ] ; then
	echo -e "\nFiles marked and stored in ${BOLD}local${NORMAL} Git repository."
	echo    "View local commits example:  ${BOLD}git log --graph --decorate --oneline --color --stat origin..HEAD${NORMAL}"
fi

#
get_date_stamp ; echo -e "${NORMAL}${DATE_STAMP} ${LOCALHOST} ${0}[$$] ${SCRIPT_VERSION} ${LINENO} ${USER} ${USER_ID}:${GROUP_ID} ${BOLD}[INFO]${NORMAL}  Operation finished." 1>&2
###
