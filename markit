#!/bin/bash
#	markit	3.5.126	2018-02-18_21:33:53_CST uadmin six-rpi3b.cptx86.com 3.4-23-g1090ede 
#	   New release, all issues closed and tested, ready for production fix #12 
#	markit	3.5.126	2018-02-18_21:23:15_CST uadmin six-rpi3b.cptx86.com 3.4-23-g1090ede 
#	   New release, all issues closed and tested, ready for production 
#	markit	3.4.120	2018-02-17_17:25:15_CST uadmin six-rpi3b.cptx86.com 3.4-17-gf87b479 
#	   completed testing -v --version closes #16 
#	markit	3.4.119	2018-02-17_17:18:37_CST uadmin six-rpi3b.cptx86.com 3.4-16-gbb9e0d0 
#	   remove TEMP_MARKIT_FILE file after write permission test closes #18 
#	markit	3.4.115	2018-02-13_20:59:01_CST uadmin six-rpi3b.cptx86.com 3.4-12-g238584b 
#	   before commit 3.4-12-g238584b 
#	markit	3.4.102	2018-02-12_21:42:38_CST uadmin six-rpi3b.cptx86.com 3.3-16-g60fe794 
#	   New release, all issues closed and tested, ready for production 
#
#	set -x
#	set -v
#
#	I created this script because Git fails me when it comes to including a
#	version number and a change description in each file being checked-in.
#
#	I want to know what version a piece of code is on any system running
#	it. The system may or may not be connected to any network. The system
#	may or may not have Git installed. The system may or may not have the
#	GitHub repository installed on it. I want the same solution for several
#	types of code (.sh, .go, .yml, .xml, .mk, dockerfile, .txt, etc). I
#	want any person without knowledge of Git or GitHub to be able to answer
#	one question over the phone; What version are you running?
#
#	Released files need a version number in text when checked in!
#       This is not for your kernal, just files.  Bite me!  and  Merge that!
###
display_help() {
echo -e "\n${0} - Add two comment lines about file changes & push to GitHub"
echo -e "\nUSAGE\n   ${0} [no | normal | all]"
echo    "   ${0} [--help | -help | help | -h | h | -? | ?] [--version | -v]"
echo -e "\nDESCRIPTION\nAdd two comment lines of information about file changes to all tracked modified"
echo    "files in your local Git repository.  Then push those changed file(s) to GitHub."
echo    "The first comment line includes file name, version, date, programmer, and"
echo    "hostname as the second line of the file(s).  Followed by a single comment"
echo    "line including a brief description about changes made to the file(s)."
echo -e "\nMarkit only modifies Git tracked files by default.  To change a Git"
echo    "untracked file to a Git tracked file enter, git add <file_name>.  Markit will"
echo    "modify all untracked and tracked files if normal or all is entered as an"
echo    "arguement.  To prevent an untracked file from being tracked, add file(s) to"
echo    ".gitignore file.  There will be prompts for comment character(s) when"
echo    "needed and a description about the changes."
echo -e "\nOPTIONS\n   UNTRACKED_FILES - used to specify the handling of untracked files"
echo    "   no       no untracked files (default)"
echo    "   normal   untracked files and directories"
echo    "   all      Also individual files in untracked directories"
echo -e "\nDOCUMENTATION\n   https://github.com/BradleyA/markit"
echo -e "\nEXAMPLES\n   Mark tracked file(s)\n      ${0}"
echo -e "   Mark tracked and untracked files, directories, and files in untracked\n   directories\n      ${0} all\n"
}
if [ "$1" == "--help" ] || [ "$1" == "-help" ] || [ "$1" == "help" ] || [ "$1" == "-h" ] || [ "$1" == "h" ] || [ "$1" == "-?" ] || [ "$1" == "?" ] ; then
	display_help
	exit 0
fi
if [ "$1" == "--version" ] || [ "$1" == "-v" ] ; then
	head -2 ${0} | awk {'print$2"\t"$3'}
	exit 0
fi
###	Test for
#	>>>	x	blank $1 & no, normal, all
#	>>>		dockerfile
###
#	Check if in Git repository
source /usr/share/bash-completion/completions/git
if ! $( __gitdir > /dev/null 2>&1 ) ; then
	echo -e "${0} ${LINENO} [WARNING]:	`pwd` Check if you are in a Git repository\n\tand you have GIT permission.\n"	1>&2
	exit 0
fi
###
UNTRACKED_FILES=${1:-no}
CURRENT_RELEASE=`git tag | tail -1`
BEGIN_COMMENT_CHAR=""
END_COMMENT_CHAR=""
NUMBER_COMMITS=`git rev-list HEAD | wc -l`	
TEMP_FILE="TEMP_MARKIT_FILE"
TIME_STAMP=`date +%Y-%m-%d_%H:%M:%S_%Z`
#	The FILE_MESSAGE is a one line breif description about the changes.
FILE_MESSAGE=""
FILE_RELEASE=""
#	Check arguement 1 for --untracked-files
if [ "$1" != "no" ] && [ "$1" != "normal" ] && [ "$1" != "all" ] && [ "$1" != "" ] ; then
	display_help
	echo -e "${0} ${LINENO} [ERROR]:	First arguement, ${1}, is NOT no, normal, all.\n"	1>&2
	exit 0
fi
#	Create FILE_LIST, remove deleted files from FILE_LIST
FILE_LIST=`git status -s --untracked-files=${UNTRACKED_FILES} | grep -v '^D  ' | awk '{print $2}'`
#	Check if ${FILE_LIST} is zero length
if [ -z "${FILE_LIST}" ] ; then
	display_help
	echo -e "${0} ${LINENO} [WARNING]:	No file(s) found to mark and push to GitHub.\n"	1>&2
#	Display untracked file(s)
	if [ $(git status --untracked-file=all -s | wc -l) ] ; then 
		echo -e "\nList of untracked file(s)."
		git status --untracked-file=all -s | grep '?? ' | sed 's/^??//'
		echo -e "\nEnter 'git add <file-name>' to track untracked file(s).\n"
	fi
	exit 1
fi
#	Check if user has write permission
	if ! $(touch ${TEMP_FILE} > /dev/null 2>&1 ) ; then
		echo -e "${0} ${LINENO} [ERROR]:	${USER} does NOT have write permission\n\tin local Git repository."	1>&2
		exit 1
	fi
	rm -f ${TEMP_FILE}
#	Prompt for release number
echo -e "Files to be marked and pushed to GitHub:\n${FILE_LIST}"
echo -e "\nCurrent release number: ${CURRENT_RELEASE} "
echo -e "\nEnter release number to commit files to GitHub (example 3.01).\nPress enter to use ${CURRENT_RELEASE} release number or ctrl-c to stop."
read     FILE_RELEASE
#	Check if release number is newer than add tag reference with new release number
#	>>>	   think about changing == to >= (are all release numbers? no A.01 ?)
#	>>>	        is v1.0 > v2.0 or < v1.1 
if [ -z ${FILE_RELEASE} ] ; then
	FILE_RELEASE=${CURRENT_RELEASE}
fi
if [ -z ${FILE_RELEASE} ] ; then
	display_help
	echo -e "${0} ${LINENO} [ERROR]:	No release number to mark and push to GitHub.\n"       1>&2
	exit 1
fi
echo -e "${0} ${LINENO} [INFO]:	Using release number: ${FILE_RELEASE}"	1>&2
#	Prompt for single line change description
echo -e "\nEnter a one line description about the changes\n   (example: Added logic for --help; closes #12, resolves #14):"
read FILE_MESSAGE
if [ -z "${FILE_MESSAGE}" ] ; then
	display_help
	echo -e "${0} ${LINENO} [ERROR]:        Single-line description is required.\nTo display changes between commits, git diff <file_name>."       1>&2
	exit 1
fi
#	Mark each file
for FILE_NAME in ${FILE_LIST} ; do
#
# >>>	In the future, Use markit solution for source code and create a wrapper during compile/build time ?
# >>>	               This will change the extension case statement objective: move from comments to variables in compiled code
# >>>	               move from comments in source code to variables in compiled code
# >>>	               very different vision
# >>>	   Use markit in the source code & insert; var BUILD_VERSION="${FILE_RELEASE}.`git rev-list HEAD | wc -l`"
# >>>	   Or use markit; to create CHAR variable found in compiled code ?
# >>>	   	opening comment x.c 'var VERSION="' and ending comment '"'
# >>>	        opening comment x.c 'char VERSION[] = "$Version: ' ${FILE_NAME}    ${FILE_RELEASE}.`git rev-list HEAD | wc -l`     ${TIME_STAMP} ${USER} `hostname -f` `git describe` and ending comment '$";'
# >>>	                        x.o $Version: XXXX XXXX XXXX XXXX '$'
# >>>	        opening comment x.c 'char VERSION_MESSAGE[] = "$Version_message: ' ${FILE_MESSAGE} ` and ending comment '$";'
# >>>	                        x.o $Version_message: XXXX '$'
#
# >>>	Create a case statement if other non-extension files like Dockerfile need support
	if [ "${FILE_NAME##*/}" == "Dockerfile" ] ; then
		BEGIN_COMMENT_CHAR="#	"
		END_COMMENT_CHAR=""
	else
# >>>	This does not work if the last character is '.' but it does work if more than one "."
	FILE_EXTENSION=${FILE_NAME##*\.}
	echo "${FILE_NAME}	${FILE_EXTENSION}"
#	Single-line comment character(s) matching file extension
#	ONLY SUPPORT single-line comments NOT multiple line block comment
	case ${FILE_EXTENSION} in
		sh|pl|PL|py|rb|ps1|php|php3|php4|ph3|ph4|R|yml|yaml|mk|MK|txt)
#		UNIX shell(sh) perl(pl|PL) python(py) ruby(rb) PowerShell(ps1) PHP(php|php3|php4|ph3|ph4) R(R) YAML(yml|yaml) makefile(mk|MK) text (txt)
			BEGIN_COMMENT_CHAR="# "
			END_COMMENT_CHAR=""
			;;
		c|h|H|hpp|hxx|Hxx|HXX)
#		c(c) C header(h|H|hpp) C++ header(hxx|Hxx|HXX) 
			BEGIN_COMMENT_CHAR="/* "
			END_COMMENT_CHAR=" */"
			;;
		cc|cpp|c++|cxx|go|java|class|jar|js|kt|kts|p|pp|pas|rs|rlib|scala|sc)
#		C++(cc|cpp|c++|cxx) Go(g0) Java(java|class|jar) JavaScript(js) Kotlin(kt|kts) Pascal (p|pp|paa) Rust(rs|rlib) Scala(scala|sc)
			BEGIN_COMMENT_CHAR="// "
			END_COMMENT_CHAR=""
			;;
		xml|html|htm)
#		XML(xml) HTML (html|htm) 
			BEGIN_COMMENT_CHAR="<!-- "
			END_COMMENT_CHAR=" -->"
			;;
		*)
#			Prompt for single-line beginning comment character(s)
			echo -e "\nEnter single-line  BEGINNING  comment character(s) for ${FILE_NAME}\n   (example: # // -- ' ! C !* -- // % ;;  ||  /* <!-- <!--- {- /** --[[ %{ (* <# )"
			read BEGIN_COMMENT_CHAR
			if [ -z ${BEGIN_COMMENT_CHAR} ] ; then
				display_help
				echo -e "${0} ${LINENO} [ERROR]:        Single-line comment character(s) is required.\n"       1>&2
				exit 1
			fi
			echo -e "\nEnter single-line  ENDING  comment character(s) for ${FILE_NAME}.\nPress enter for none.\n (example: */ --> ---> -} */ --]] %} *) #> )"
			read END_COMMENT_CHAR
			;;
	esac
	fi
	head -1 ${FILE_NAME} >> ${TEMP_FILE}
#	${FILE_NAME}  ${FILE_RELEASE}.(# of commits) ${TIME_STAMP} ${USER} (hostname) (git parent tag-commit_number-hash)
	echo "${BEGIN_COMMENT_CHAR}	${FILE_NAME}	${FILE_RELEASE}.`git rev-list HEAD | wc -l`	${TIME_STAMP} ${USER} `hostname -f` `git describe` ${END_COMMENT_CHAR}" >> ${TEMP_FILE}
	echo "${BEGIN_COMMENT_CHAR}	   ${FILE_MESSAGE} ${END_COMMENT_CHAR}" >> ${TEMP_FILE}
	tail -n `wc -l ${FILE_NAME} | awk '{print $1  - 1}'` ${FILE_NAME} >> ${TEMP_FILE}
	cp ${TEMP_FILE} ${FILE_NAME}
	rm ${TEMP_FILE}
#	Add file contents to the index
	git add ${FILE_NAME}
done
#	Commit staged file(s) for Git push
	git commit -m "${FILE_MESSAGE}"
#	>>> ????????????
if ! [ "${FILE_RELEASE}" == "${CURRENT_RELEASE}" ] ; then
	git tag -a ${FILE_RELEASE} -m "${FILE_MESSAGE}"
#	Push changes to GitHub repository
	git push --follow-tags  || { echo -e "${0} ${LINENO} [ERROR]:  GitHub login fail,\n\tRespoitory or password NOT correct.\n\tEnter; 'git push --follow-tags' to complete pushing marked file(s) to GitHub." ; exit 1; }
else
#	Push changes to GitHub repository
	git push || { echo -e "${0} ${LINENO} [ERROR]:	GitHub login fail,\n\tRespoitory or password NOT correct.\n\tEnter; 'git push' to complete pushing marked file(s) to GitHub." ; exit 1; }
fi
###
