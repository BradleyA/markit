#!/bin/bash
#	check-markit  3.66.212  2018-08-09_16:08:45_CDT  https://github.com/BradleyA/markit  uadmin  three-rpi3b.cptx86.com 3.65  
#	   changes to DEBUG statements and LANG #17 
#	check-markit  3.64.210  2018-08-09_15:48:42_CDT  https://github.com/BradleyA/markit  uadmin  three-rpi3b.cptx86.com 3.63-1-g7764ba9  
#	   add DEBUG lines and LANG check asking for LANG help #17 
#	check-markit  3.50.193  2018-08-05_21:08:54_CDT  https://github.com/BradleyA/markit  uadmin  three-rpi3b.cptx86.com 3.49  
#	   needs more testing with GitLab close #31 
###
#	set -x
#	set -v
###
DEBUG=0			# 0 = debug off, 1 = debug on
BOLD=$(tput bold)
NORMAL=$(tput sgr0)
#
display_help() {
echo -e "\n${0} - check file release with repository release"
echo -e "\nUSAGE\n   ${0} [<FILE_NAME>]"
echo    "   ${0} [--file <PATH>/<FILE_NAME> | -f <PATH>/<FILE_NAME>]"
echo    "   ${0} [--help | -help | help | -h | h | -? | ?] [--version | -v]"
echo -e "\nDESCRIPTION\nCheck the release of a file that was marked using markit with the GitHub"
echo    "or GitLab repository release.  Check-markit may require --file option to"
echo    "include the relative or absolute path with the file name."
echo -e "\nCheck-markit only works on files that are marked with markit release 3.10.142"
echo    "(dated 2018-02-27_19:00:09_CST) or later releases.  Markit release 3.10.142"
echo    "added the repository information to the second line in a marked file.  This"
echo    "repository information is required for check-markit to locate a file on GitHub"
echo    "or GitLab."
echo -e "\nCheck-markit only works with markit files that used the https:// URLs for"
echo    "GitHub and GitLab repositories.  Check-markit does not currently support files"
echo    "with SSH URLs for GitHub and GitLab repositories."
echo -e "\nOPTIONS\n   -f, --file\n      path and file on system '<path>/<file_name>'"
echo -e "\nDOCUMENTATION\n   https://github.com/BradleyA/markit"
echo -e "\nEXAMPLES\n   check-markit -f testfiles/sample.c\n\n   Check file named sample.c release in relative path testfile/ with\n   repository release."
echo -e "\n   check-markit markit\n\n   Check file named markit release with repository release.\n"
if ! [ "${LANG}" == "en_US.UTF-8" ] ; then
        echo -e "${NORMAL}${0} ${LINENO} [${BOLD}WARNING${NORMAL}]:     Your language, ${LANG}, is not supported.\n\tWould you like to help?\n" 1>&2
fi
}
if [ "$1" == "--help" ] || [ "$1" == "-help" ] || [ "$1" == "help" ] || [ "$1" == "-h" ] || [ "$1" == "h" ] || [ "$1" == "-?" ] || [ "$1" == "?" ] ; then
	display_help
	exit 0
fi
if [ "$1" == "--version" ] || [ "$1" == "-version" ] || [ "$1" == "version" ] ||  [ "$1" == "-v" ] ; then
	head -2 ${0} | awk {'print$2"\t"$3'}
	exit 0
fi
###
#       Check if argument 1 is blank
if [ "${1}" == "" ] ; then
	display_help
	echo -e "${NORMAL}\n${0} ${LINENO} [${BOLD}ERROR${NORMAL}]:  File not found on command line\n" 1>&2
	exit 0
fi
#	Check if argument 1 is -f or --file
if [ "${1}" == "--file" ] || [ "${1}" == "-f" ] ; then
	#       Check if argument 2 is blank
	if [ "${2}" == "" ] ; then
		display_help
		echo -e "${NORMAL}\n${0} ${LINENO} [${BOLD}ERROR${NORMAL}]:  File name not found; --file <path>/<file_name> or -f <path>/<file_name> option\n" 1>&2
		exit 0
	fi
	MARKIT_FILE=${2}
else
	#	Locate file in the PATH
	TEMP=`whereis "${1}"`
	MARKIT_FILE=$(echo ${TEMP} | awk {'print $2'} )
	if [ "${DEBUG}" == "1" ] ; then echo -e "> DEBUG ${LINENO}  MARKIT_FILE ${MARKIT_FILE}<< FILE_NAME ${FILE_NAME}<< REPOSITORY_COMMAND ${REPOSITORY_COMMAND}<< MARKIT_FILE_RELEASE ${MARKIT_FILE_RELEASE}<< " 1>&2 ; fi
	#       Check if MARKIT_FILE is blank
	if [ "${MARKIT_FILE}" == "" ] ; then
		display_help
		echo -e "${NORMAL}\n${0} ${LINENO} [${BOLD}ERROR${NORMAL}]:  ${1} not found; use --file <path>/<file_name> or -f <path>/<file_name> option\n" 1>&2
		exit 0
	fi
fi
#	Parse file name from MARKIT_FILE
FILE_NAME=`echo ${MARKIT_FILE} | sed 's/.*\///'`
#       Check if file exists and has a size greater than zero || if file exists and is readable
if [ ! -s ${MARKIT_FILE} ] || [ ! -r ${MARKIT_FILE} ] ; then
       	echo -e "${NORMAL}\n${0} ${LINENO} [${BOLD}ERROR${NORMAL}]:  ${MARKIT_FILE} file is not found or is empty or is not readable\n" 1>&2
	exit 1
fi
REPOSITORY_COMMAND=`grep -m 1 -e ${FILE_NAME} -e git ${MARKIT_FILE} | awk {'print$5'}`
MARKIT_FILE_RELEASE=`grep -m 1 -e ${FILE_NAME} -e git ${MARKIT_FILE} | awk {'print$3'}`
if [ "${DEBUG}" == "1" ] ; then echo -e "> DEBUG ${LINENO}  MARKIT_FILE ${MARKIT_FILE}<< FILE_NAME ${FILE_NAME}<< REPOSITORY_COMMAND ${REPOSITORY_COMMAND}<< MARKIT_FILE_RELEASE ${MARKIT_FILE_RELEASE}<< " 1>&2 ; fi
#	Check file to determine if it was marked before markit release 3.10.142
#	if !  `echo "${REPOSITORY_COMMAND}" | grep -q "https"`  ; then
if ! grep -q "https" <<< ${REPOSITORY_COMMAND}  ; then
	echo -e "\n${NORMAL}${0} ${LINENO} [${BOLD}ERROR${NORMAL}]:  ${MARKIT_FILE} is not marked with markit or the --file option was not used or git origin did not include https address (git remote -v) when marked or file was marked with a release before markit 3.10.142\n" 1>&2
	exit
fi
###
#	need to make sure that script is able to contact GitHib or GitLab before using curl
#	add a test
###
###	Determine name of repository
if grep -q "github" <<< ${REPOSITORY_COMMAND} ; then
	echo -e "${NORMAL}\n${0} ${LINENO} [${BOLD}INFO${NORMAL}]:  Checking GitHub for ${BOLD}${FILE_NAME}${NORMAL} repository release information\n" 1>&2
	REPOSITORY_COMMAND=`echo ${REPOSITORY_COMMAND} | sed 's/github.com/api.github.com\/repos/'`
	REPOSITORY_COMMAND="curl \-L ${REPOSITORY_COMMAND}/tarball | tar --directory /tmp/markit-temp -xzf - "
elif grep -q "gitlab" <<< ${REPOSITORY_COMMAND} ; then
	echo -e "${NORMAL}\n${0} ${LINENO} [${BOLD}INFO${NORMAL}]:  Checking GitLab for ${BOLD}${FILE_NAME}${NORMAL} repository release information\n" 1>&2
	PROJECT_NAME=`echo ${REPOSITORY_COMMAND} | sed 's/^https:\/\/.*\/.*\///' | sed 's/\.git$//'`
	REPOSITORY_COMMAND=`echo ${REPOSITORY_COMMAND} | sed 's/\.git$/\/-\/archive\/master\//'`
	if [ "${DEBUG}" == "1" ] ; then echo -e "> DEBUG ${LINENO}  MARKIT_FILE ${MARKIT_FILE}<< FILE_NAME ${FILE_NAME}<< REPOSITORY_COMMAND ${REPOSITORY_COMMAND}<< MARKIT_FILE_RELEASE ${MARKIT_FILE_RELEASE}<< " 1>&2 ; fi
	REPOSITORY_COMMAND="curl \-L ${REPOSITORY_COMMAND}${PROJECT_NAME}-master.tar.gz | tar --directory /tmp/markit-temp -xzf - "
	if [ "${DEBUG}" == "1" ] ; then echo -e "> DEBUG ${LINENO}  MARKIT_FILE ${MARKIT_FILE}<< FILE_NAME ${FILE_NAME}<< REPOSITORY_COMMAND ${REPOSITORY_COMMAND}<< MARKIT_FILE_RELEASE ${MARKIT_FILE_RELEASE}<< " 1>&2 ; fi
else 
	if [ "${DEBUG}" == "1" ] ; then echo -e "> DEBUG ${LINENO}  MARKIT_FILE ${MARKIT_FILE}<< FILE_NAME ${FILE_NAME}<< REPOSITORY_COMMAND ${REPOSITORY_COMMAND}<< MARKIT_FILE_RELEASE ${MARKIT_FILE_RELEASE}<< " 1>&2 ; fi
	echo    ">>>> Repository using SSH URLs  <<<<<"
	echo    ">>>> or other repository like bitbucket, Codebase, Assembla, Fog Creek Kiln, etc   <<<<<"
	exit
fi
###
if [ "${DEBUG}" == "1" ] ; then echo -e "> DEBUG ${LINENO}  MARKIT_FILE ${MARKIT_FILE}<< FILE_NAME ${FILE_NAME}<< REPOSITORY_COMMAND ${REPOSITORY_COMMAND}<< MARKIT_FILE_RELEASE ${MARKIT_FILE_RELEASE}<< " 1>&2 ; fi
mkdir /tmp/markit-temp
eval ${REPOSITORY_COMMAND}
FILE_NAME_LOCATION=`find /tmp/markit-temp -type f -name ${FILE_NAME} -print`
MARKIT_FILE_CURRENT_RELEASE=`grep -m 1 -e ${FILE_NAME} -e git ${FILE_NAME_LOCATION} | awk {'print$3'}`
MARKIT_FILE_DATE=`grep -m 1 -e ${FILE_NAME} -e git ${FILE_NAME_LOCATION} | awk {'print$4'}`
rm -rf /tmp/markit-temp
###
echo -e "${NORMAL}\n${0} ${LINENO} [${BOLD}INFO${NORMAL}]:  ${MARKIT_FILE} release ${BOLD}${MARKIT_FILE_RELEASE}${NORMAL}" 1>&2
echo -e "${NORMAL}\n${0} ${LINENO} [${BOLD}INFO${NORMAL}]:  ${FILE_NAME} repository release ${BOLD}${MARKIT_FILE_CURRENT_RELEASE}${NORMAL}, commit date ${MARKIT_FILE_DATE}\n" 1>&2
###
